{"version":3,"sources":["webpack:///./src/templates/index-page.js","webpack:///./src/components/Features.js","webpack:///./src/components/BlogRoll.js"],"names":["IndexPageTemplate","image","title","heading","subheading","mainpitch","description","intro","className","style","backgroundImage","childImageSharp","fluid","src","backgroundPosition","backgroundAttachment","display","height","lineHeight","justifyContent","alignItems","flexDirection","boxShadow","backgroundColor","opacity","color","padding","gridItems","blurbs","to","IndexPage","frontmatter","data","markdownRemark","pageQuery","FeatureGrid","map","item","key","text","width","imageInfo","BlogRoll","render","posts","this","props","allMarkdownRemark","edges","post","node","id","featuredpost","featuredimage","alt","fields","slug","date","excerpt","React","Component","query","count"],"mappings":"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","file":"component---src-templates-index-page-js-e4a8e370e5d5eef1a567.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link, graphql } from 'gatsby'\r\n\r\nimport Layout from '../components/Layout'\r\nimport Features from '../components/Features'\r\nimport BlogRoll from '../components/BlogRoll'\r\n\r\nexport const IndexPageTemplate = ({\r\n  image,\r\n  title,\r\n  heading,\r\n  subheading,\r\n  mainpitch,\r\n  description,\r\n  intro,\r\n}) => (\r\n  <div>\r\n    <div\r\n      className=\"full-width-image margin-top-0\"\r\n      style={{\r\n        backgroundImage: `url(${\r\n          !!image.childImageSharp ? image.childImageSharp.fluid.src : image\r\n        })`,\r\n        backgroundPosition: `top left`,\r\n        backgroundAttachment: `fixed`,\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          height: '150px',\r\n          lineHeight: '1',\r\n          justifyContent: 'space-around',\r\n          alignItems: 'left',\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        <h1\r\n          className=\"has-text-weight-bold is-size-3-mobile is-size-2-tablet is-size-1-widescreen\"\r\n          style={{\r\n            boxShadow:\r\n              '#73939C 0.5rem 0px 0px, #73939C -0.5rem 0px 0px',\r\n            backgroundColor: '#73939C',\r\n            opacity: '0.75',\r\n            color: 'white',\r\n            lineHeight: '1',\r\n            padding: '0.25em',\r\n          }}\r\n        >\r\n          {title}\r\n        </h1>\r\n        <h3\r\n          className=\"has-text-weight-bold is-size-5-mobile is-size-5-tablet is-size-4-widescreen\"\r\n          style={{\r\n            boxShadow:\r\n              '#73939C 0.5rem 0px 0px, #73939C -0.5rem 0px 0px',\r\n            backgroundColor: '#73939C',\r\n            opacity: '0.75',\r\n            color: 'white',\r\n            lineHeight: '1',\r\n            padding: '0.25em',\r\n          }}\r\n        >\r\n          {subheading}\r\n        </h3>\r\n      </div>\r\n    </div>\r\n    <section className=\"section section--gradient\">\r\n      <div className=\"container\">\r\n        <div className=\"section\">\r\n          <div className=\"columns\">\r\n            <div className=\"column is-10 is-offset-1\">\r\n              <div className=\"content\">\r\n                <div className=\"content\">\r\n                  <div className=\"tile\">\r\n                    <h1 className=\"title\">{mainpitch.title}</h1>\r\n                  </div>\r\n                  <div className=\"tile\">\r\n                    <h3 className=\"subtitle\">{mainpitch.description}</h3>\r\n                  </div>\r\n                </div>\r\n                <div className=\"columns\">\r\n                  <div className=\"column is-12\">\r\n                    <h3 className=\"has-text-weight-semibold is-size-2\">\r\n                      {heading}\r\n                    </h3>\r\n                    <p>{description}</p>\r\n                  </div>\r\n                </div>\r\n                <Features gridItems={intro.blurbs} />\r\n                <div className=\"columns\">\r\n                  <div className=\"column is-12 has-text-centered\">\r\n                    <Link className=\"btn\" to=\"/products\">\r\n                      See all services\r\n                    </Link>\r\n                  </div>\r\n                </div>                \r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n)\r\n\r\nIndexPageTemplate.propTypes = {\r\n  image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n  title: PropTypes.string,\r\n  heading: PropTypes.string,\r\n  subheading: PropTypes.string,\r\n  mainpitch: PropTypes.object,\r\n  description: PropTypes.string,\r\n  intro: PropTypes.shape({\r\n    blurbs: PropTypes.array,\r\n  }),\r\n}\r\n\r\nconst IndexPage = ({ data }) => {\r\n  const { frontmatter } = data.markdownRemark\r\n\r\n  return (\r\n    <Layout>\r\n      <IndexPageTemplate\r\n        image={frontmatter.image}\r\n        title={frontmatter.title}\r\n        heading={frontmatter.heading}\r\n        subheading={frontmatter.subheading}\r\n        mainpitch={frontmatter.mainpitch}\r\n        description={frontmatter.description}\r\n        intro={frontmatter.intro}\r\n      />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nIndexPage.propTypes = {\r\n  data: PropTypes.shape({\r\n    markdownRemark: PropTypes.shape({\r\n      frontmatter: PropTypes.object,\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default IndexPage\r\n\r\nexport const pageQuery = graphql`\r\n  query IndexPageTemplate {\r\n    markdownRemark(frontmatter: { templateKey: { eq: \"index-page\" } }) {\r\n      frontmatter {\r\n        title\r\n        image {\r\n          childImageSharp {\r\n            fluid(maxWidth: 2048, quality: 100) {\r\n              ...GatsbyImageSharpFluid\r\n            }\r\n          }\r\n        }\r\n        heading\r\n        subheading\r\n        mainpitch {\r\n          title\r\n          description\r\n        }\r\n        description\r\n        intro {\r\n          blurbs {\r\n            image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 240, quality: 64) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            text\r\n          }\r\n          heading\r\n          description\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport PreviewCompatibleImage from '../components/PreviewCompatibleImage'\r\n\r\nconst FeatureGrid = ({ gridItems }) => (\r\n  <div className=\"columns is-multiline\">\r\n    {gridItems.map((item) => (\r\n      <div key={item.text} className=\"column is-6\">\r\n        <section className=\"section\">\r\n          <div className=\"has-text-centered\">\r\n            <div\r\n              style={{\r\n                width: '240px',\r\n                display: 'inline-block',\r\n              }}\r\n            >\r\n              <PreviewCompatibleImage imageInfo={item} />\r\n            </div>\r\n          </div>\r\n          <p>{item.text}</p>\r\n        </section>\r\n      </div>\r\n    ))}\r\n  </div>\r\n)\r\n\r\nFeatureGrid.propTypes = {\r\n  gridItems: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n      text: PropTypes.string,\r\n    })\r\n  ),\r\n}\r\n\r\nexport default FeatureGrid\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link, graphql, StaticQuery } from 'gatsby'\r\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\r\n\r\nclass BlogRoll extends React.Component {\r\n  render() {\r\n    const { data } = this.props\r\n    const { edges: posts } = data.allMarkdownRemark\r\n\r\n    return (\r\n      <div className=\"columns is-multiline\">\r\n        {posts &&\r\n          posts.map(({ node: post }) => (\r\n            <div className=\"is-parent column is-6\" key={post.id}>\r\n              <article\r\n                className={`blog-list-item tile is-child box notification ${\r\n                  post.frontmatter.featuredpost ? 'is-featured' : ''\r\n                }`}\r\n              >\r\n                <header>\r\n                  {post.frontmatter.featuredimage ? (\r\n                    <div className=\"featured-thumbnail\">\r\n                      <PreviewCompatibleImage\r\n                        imageInfo={{\r\n                          image: post.frontmatter.featuredimage,\r\n                          alt: `featured image thumbnail for post ${post.frontmatter.title}`,\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  ) : null}\r\n                  <p className=\"post-meta\">\r\n                    <Link\r\n                      className=\"title has-text-primary is-size-4\"\r\n                      to={post.fields.slug}\r\n                    >\r\n                      {post.frontmatter.title}\r\n                    </Link>\r\n                    <span> &bull; </span>\r\n                    <span className=\"subtitle is-size-5 is-block\">\r\n                      {post.frontmatter.date}\r\n                    </span>\r\n                  </p>\r\n                </header>\r\n                <p>\r\n                  {post.excerpt}\r\n                  <br />\r\n                  <br />\r\n                  <Link className=\"button\" to={post.fields.slug}>\r\n                    Keep Reading →\r\n                  </Link>\r\n                </p>\r\n              </article>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nBlogRoll.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      edges: PropTypes.array,\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query BlogRollQuery {\r\n        allMarkdownRemark(\r\n          sort: { order: DESC, fields: [frontmatter___date] }\r\n          filter: { frontmatter: { templateKey: { eq: \"blog-post\" } } }\r\n        ) {\r\n          edges {\r\n            node {\r\n              excerpt(pruneLength: 400)\r\n              id\r\n              fields {\r\n                slug\r\n              }\r\n              frontmatter {\r\n                title\r\n                templateKey\r\n                date(formatString: \"MMMM DD, YYYY\")\r\n                featuredpost\r\n                featuredimage {\r\n                  childImageSharp {\r\n                    fluid(maxWidth: 120, quality: 100) {\r\n                      ...GatsbyImageSharpFluid\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={(data, count) => <BlogRoll data={data} count={count} />}\r\n  />\r\n)\r\n"],"sourceRoot":""}